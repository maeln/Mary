#include "Graph.hxx"
#include "GraphException.hxx"
#include <exception>
#include <stdint.h>

Graph::Graph()
{

}

Graph::~Graph()
{
}

unsigned int Graph::nodes_size()
{
	return m_nodes.size();
}

Node Graph::get_node(unsigned int id)
{
	if(id <= m_nodes.size())
		return m_nodes[id];
	else
		throw GraphException("Node already in graph.");
}

std::vector<Node> Graph::get_neighbors(Node node, unsigned int depth)
{

}

void Graph::add_node(std::string name)
{
	bool present = false;
	for(unsigned int i = 0; i < m_nodes.size(); ++i)
	{
		if(m_nodes[i].get_name() == name)
		{
			present = true;
			break;
		}
	}

	if(present)
		throw GraphException("Node already in graph.");
	else
		m_nodes.push_back(Node(name));
}

void Graph::add_node(Node node)
{
	bool present = false;
	for(unsigned int i = 0; i < m_nodes.size(); ++i)
	{
		if(m_nodes[i] == node)
		{
			present = true;
			break;
		}
	}

	if(present)
		throw GraphException("Node already in graph.");
	else
			m_nodes.push_back(node);
}

void Graph::link_nodes(std::string lhs, std::string rhs)
{
}

void Graph::link_nodes(Node* lhs, Node* rhs)
{
	//lhs->m_neighbors.push_back(rhs);
	//rhs->m_neighbors.push_back(lhs);
}
